
#Использовать logos

Перем Лог; // Объект логирования

Перем СтруктураОписанияИнтерфейса; // ТаблицаЗначений
Перем КомментарийПрочитан; // Булево
Перем ЧтениеПараметров; // Булево
Перем ПолноеИмяОбъекта; // Строка

Перем ЧтениеВозвращаемыхЗначений; // Булево
Перем ЧтениеПримера; // Булево
Перем СтруктураМетода; // Структура
Перем ЧтениеМетода; // Булево
Перем МетодПрочитан; // Булево

Перем ТекущаяОбласть; // Строка

#Область Публичный_интерфейс

// Устанавливает имя объекта для описания сигнатуры вызова методов
//
// Параметры:
//   НовоеИмяОбъекта - Строка - имя объекта для описания сигнатуры вызова методов
//
Процедура ИмяОбъекта(Знач НовоеИмяОбъекта) Экспорт
	ПолноеИмяОбъекта = НовоеИмяОбъекта;
КонецПроцедуры

// Устанавливает таблицу приемник для результатов разбора текста модуля
//
// Параметры:
//   ТаблицаПриемник - ТаблицаЗначений - таблица приемник для отражения результатов разбора
//
Процедура ТаблицаИнтерфейсаМодуля(ТаблицаПриемник) Экспорт
	СтруктураОписанияИнтерфейса = ТаблицаПриемник;
КонецПроцедуры

// Выполняет последовательное чтение текста модуля и 
// заполняет таблицу интерфейса модуля
//
// Параметры:
//   ТекстМодуля - Строка - текст модуля для разбора
//
Процедура ПрочитатьТекстМодуля(Знач ТекстМодуля) Экспорт
	
	Если СтруктураОписанияИнтерфейса = Неопределено Тогда
		ВызватьИсключение "Не установлена таблица приемник";
	КонецЕсли;

	ТекущаяОбласть = "";
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстМодуля);
	
	УстановитьПеременные();
	
	Для Итератор = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		ПрочитаннаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(Итератор);
		Если ЧтениеМетода Тогда
			Если ЭтоКонецМетода(ПрочитаннаяСтрока) Тогда
				// Чтение тела процедуры или функции завершено.
				УстановитьПеременные();
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если ЭтоКонецОбласти(ПрочитаннаяСтрока) Тогда
			ЭлементыОбласти = СтрРазделить(ТекущаяОбласть, ".");
			ЗакончиласьОбласть = ЭлементыОбласти[ЭлементыОбласти.ВГраница()];
			
			Если НЕ ПустаяСтрока(ЗакончиласьОбласть) Тогда
				ТекущаяОбласть = СтрЗаменить(ТекущаяОбласть, "." + ЗакончиласьОбласть, "");
			КонецЕсли;

		КонецЕсли;

		Если ЭтоНачалоОбласти(ПрочитаннаяСтрока) Тогда
			ТекущаяОбласть = СтрШаблон("%1%2%3", ТекущаяОбласть,
									?(ПустаяСтрока(ТекущаяОбласть), "", "."),
									СтрЗаменить(ПрочитаннаяСтрока, НачалоОбласти(), ""));
		КонецЕсли;

		Если ПустаяСтрока(ПрочитаннаяСтрока) Тогда
			Продолжить;
		ИначеЕсли ЭтоНачалоКомментария(ПрочитаннаяСтрока) Тогда
			СтруктураМетода.Вставить("ДлинаОписания", 0);
			ПрочитатьКомментарийИМетод(ПрочитаннаяСтрока, ТекстовыйДокумент, Итератор);
		КонецЕсли;

		Если КомментарийПрочитан И ЧтениеМетода Тогда
			ЗаполнитьЗначенияСвойств(СтруктураОписанияИнтерфейса.Добавить(), СтруктураМетода);
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Вспомогательные_процедуры_и_функции

Функция ЭтоНачалоКомментария(Знач ПрочитаннаяСтрока)
	
	Возврат СтрНачинаетсяС(ПрочитаннаяСтрока, "//"); 

КонецФункции

Функция ЭтоКонецМетода(Знач ПрочитаннаяСтрока)
	
	ПрочитаннаяСтрокаПроверки = ВРег(СокрЛ(ПрочитаннаяСтрока));
	Возврат СтрНачинаетсяС(ПрочитаннаяСтрокаПроверки, ВРег("КонецПроцедуры"))
			Или СтрНачинаетсяС(ПрочитаннаяСтрокаПроверки, ВРег("КонецФункции")); 

КонецФункции

Функция ЭтоНачалоМетода(Знач ПрочитаннаяСтрока)
	
	ПрочитаннаяСтрокаПроверки = ВРег(СокрЛ(ПрочитаннаяСтрока));
	Возврат СтрНачинаетсяС(ПрочитаннаяСтрокаПроверки, ВРег("Процедура "))
			Или СтрНачинаетсяС(ПрочитаннаяСтрокаПроверки, ВРег("Функция ")); 

КонецФункции

Функция ЭтоКонечСигнатурыМетода(Знач ПрочитаннаяСтрока)
	
	ПрочитаннаяСтрокаПроверки = ВРег(СокрП(ПрочитаннаяСтрока));
	Возврат СтрЗаканчиваетсяНа(ПрочитаннаяСтрокаПроверки, ВРег("Экспорт"))
			Или СтрЗаканчиваетсяНа(ПрочитаннаяСтрокаПроверки, ВРег(")")); 

КонецФункции

Функция ЭтоНачалоОбласти(Знач ПрочитаннаяСтрока)
	
	ПрочитаннаяСтрокаПроверки = ВРег(СокрЛ(ПрочитаннаяСтрока));
	Возврат СтрНачинаетсяС(ПрочитаннаяСтрокаПроверки, ВРег(НачалоОбласти())); 

КонецФункции

Функция ЭтоКонецОбласти(Знач ПрочитаннаяСтрока)
	
	ПрочитаннаяСтрокаПроверки = ВРег(СокрЛ(ПрочитаннаяСтрока));
	Возврат СтрНачинаетсяС(ПрочитаннаяСтрокаПроверки, ВРег(КонецОбласти())); 

КонецФункции

Процедура ПрочитатьКомментарийИМетод(ПрочитаннаяСтрока, ТекстовыйДокумент, Итератор, Рекурсия = Ложь)
	
	Если СтрНайти(ПрочитаннаяСтрока, "Параметры:") > 0 И СтрРазделить(ПрочитаннаяСтрока, " ", Ложь).Количество() = 2 Тогда
		ЧтениеПараметров = Истина;
		Возврат;
	ИначеЕсли СтрНайти(ПрочитаннаяСтрока, "Возвращаемое значение:") > 0 Тогда
		ЧтениеПараметров           = Ложь;
		ЧтениеВозвращаемыхЗначений = Истина;
		Возврат;
	ИначеЕсли СтрНайти(ПрочитаннаяСтрока, "// Пример:") > 0 И СтрРазделить(ПрочитаннаяСтрока, " ", Ложь).Количество() = 2 Тогда
		ЧтениеПараметров           = Ложь;
		ЧтениеВозвращаемыхЗначений = Ложь;
		ЧтениеПримера = Истина;
		Возврат;
	КонецЕсли;
	
	ПрочитаннаяСтрока = СтрЗаменить(ПрочитаннаяСтрока, "//", "");
	Если ПустаяСтрока(ПрочитаннаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	ПрочитаннаяСтрока = СтрЗаменить(ПрочитаннаяСтрока, Символы.Таб, " ");
	
	Если Не ЧтениеПараметров И Не ЧтениеВозвращаемыхЗначений И Не ЧтениеПримера Тогда
		СтруктураМетода.ОписаниеМетода =
			?(Не ПустаяСтрока(СтруктураМетода.ОписаниеМетода),
			СтруктураМетода.ОписаниеМетода + Символы.ПС + ПрочитаннаяСтрока,
			ПрочитаннаяСтрока);
	ИначеЕсли ЧтениеПараметров Тогда
		СтруктураМетода.ОписаниеПараметров = 
			?(Не ПустаяСтрока(СтруктураМетода.ОписаниеПараметров),
			СтруктураМетода.ОписаниеПараметров + Символы.ПС + ПрочитаннаяСтрока,
			ПрочитаннаяСтрока);
	ИначеЕсли ЧтениеВозвращаемыхЗначений Тогда
		СтруктураМетода.ОписаниеВозвращаемогоЗначения = 
			?(Не ПустаяСтрока(СтруктураМетода.ОписаниеВозвращаемогоЗначения),
			СтруктураМетода.ОписаниеВозвращаемогоЗначения + Символы.ПС + ПрочитаннаяСтрока,
			ПрочитаннаяСтрока);
	ИначеЕсли ЧтениеПримера Тогда
		СтруктураМетода.ОписаниеПримера = 
			?(Не ПустаяСтрока(СтруктураМетода.ОписаниеПримера),
			СтруктураМетода.ОписаниеПримера + Символы.ПС + ПрочитаннаяСтрока,
			ПрочитаннаяСтрока);
	КонецЕсли;
	
	Если Рекурсия Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураМетода.ДлинаОписания = СтруктураМетода.ДлинаОписания + 1;
	
	Итератор = Итератор + 1;
	ПрочитаннаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(Итератор);
	Пока ЭтоНачалоКомментария(ПрочитаннаяСтрока) Цикл
		ПрочитатьКомментарийИМетод(ПрочитаннаяСтрока, ТекстовыйДокумент, Итератор, Истина);
		СтруктураМетода.ДлинаОписания = СтруктураМетода.ДлинаОписания + 1;
		Итератор = Итератор + 1;
		ПрочитаннаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(Итератор);
	КонецЦикла;
	
	Если ПустаяСтрока(ПрочитаннаяСтрока) Тогда
		УстановитьПеременные();
		Возврат;
	КонецЕсли;
	
	КомментарийПрочитан = Истина;
	
	ЧтениеМетода = Истина;
	ОшибкаЧтенияМетода = Ложь;
	ПрочитатьМетод(ПрочитаннаяСтрока, ТекстовыйДокумент, Итератор, ОшибкаЧтенияМетода);
	Если ОшибкаЧтенияМетода Тогда
		УстановитьПеременные();
		Возврат;
	КонецЕсли;
	
	СтруктураМетода.ПолноеИмяОбъекта = ПолноеИмяОбъекта;
	СтруктураМетода.Область = ТекущаяОбласть;

	СинтаксисВызоваМетода = СинтаксисВызоваМетода(СтруктураМетода.СинтаксисМетода, СтруктураМетода.ПолноеИмяОбъекта);
	СтруктураМетода.ИмяМетода       = СинтаксисВызоваМетода.ИмяМетода;
	СтруктураМетода.СинтаксисВызова = СинтаксисВызоваМетода.СинтаксисВызова;
	Если СинтаксисВызоваМетода.ЭтоФункция Тогда
		СтруктураМетода.СинтаксисВызова = НСтр("ru = 'Результат'") + " = " + СтруктураМетода.СинтаксисВызова;
	КонецЕсли;
	
	СтруктураМетода.ТипМетода = ?(СинтаксисВызоваМетода.ЭтоФункция, "Функция", "Процедура");

	
КонецПроцедуры

Процедура ПрочитатьМетод(ПрочитаннаяСтрока, ТекстовыйДокумент, Итератор, ОшибкаЧтенияМетода, Рекурсия = Ложь)
	
	Если Не КомментарийПрочитан И Не ЧтениеМетода Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоКонецМетода(ПрочитаннаяСтрока) Тогда
		ОшибкаЧтенияМетода = Истина;
	ИначеЕсли ЧтениеМетода И ЭтоКонечСигнатурыМетода(ПрочитаннаяСтрока) Тогда
		СтруктураМетода.СинтаксисМетода = ?(ПустаяСтрока(СтруктураМетода.СинтаксисМетода),
			ПрочитаннаяСтрока,
			СтруктураМетода.СинтаксисМетода + Символы.ПС + ПрочитаннаяСтрока);
		
		СтруктураМетода.Публичный = СтрЗаканчиваетсяНа(ВРег(СтруктураМетода.СинтаксисМетода), ВРег("Экспорт"));
		МетодПрочитан = Истина;
	ИначеЕсли ЭтоНачалоМетода(ПрочитаннаяСтрока) Тогда
		СтруктураМетода.СинтаксисМетода = ПрочитаннаяСтрока;
	ИначеЕсли ЗначениеЗаполнено(СтруктураМетода.СинтаксисМетода) Тогда
		// Чтение параметров метода.
		СтруктураМетода.СинтаксисМетода = СтруктураМетода.СинтаксисМетода + Символы.ПС + ПрочитаннаяСтрока;
	КонецЕсли;
	
	Если Рекурсия Тогда
		Возврат;
	КонецЕсли;
	
	Пока Не МетодПрочитан Цикл
		Итератор = Итератор + 1;
		ПрочитаннаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(Итератор);
		ПрочитатьМетод(ПрочитаннаяСтрока, ТекстовыйДокумент, Итератор, ОшибкаЧтенияМетода, Истина);
		Если ОшибкаЧтенияМетода Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НачалоОбласти()
	Возврат "#Область";
КонецФункции

Функция КонецОбласти()
	Возврат "#КонецОбласти";
КонецФункции

// Вспомогательные процедуры и функции.

Процедура УстановитьПеременные()
	
	КомментарийПрочитан        = Ложь;
	ЧтениеПараметров           = Ложь;
	ЧтениеВозвращаемыхЗначений = Ложь;
	ЧтениеМетода               = Ложь;
	ЧтениеПримера              = Ложь;
	МетодПрочитан              = Ложь;
	
	СтруктураМетода = Новый Структура;
	СтруктураМетода.Вставить("ОписаниеМетода", "");
	СтруктураМетода.Вставить("ОписаниеПараметров", "");
	СтруктураМетода.Вставить("ОписаниеВозвращаемогоЗначения", "");
	СтруктураМетода.Вставить("ОписаниеПримера", "");
	СтруктураМетода.Вставить("СинтаксисМетода", "");
	СтруктураМетода.Вставить("ПолноеИмяОбъекта", "");
	СтруктураМетода.Вставить("Область", "");
	СтруктураМетода.Вставить("Размещение", "");
	СтруктураМетода.Вставить("ИмяМетода", "");
	СтруктураМетода.Вставить("СинтаксисВызова", "");
	СтруктураМетода.Вставить("Публичный", Ложь);
	
КонецПроцедуры

Функция СинтаксисВызоваМетода(Знач Метод, Знач Расположение)
	
	ЭтоФункция = СтрНайти(Метод, "Функция ") > 0;
	
	Метод = СтрЗаменить(Метод, "Функция ", "");
	Метод = СтрЗаменить(Метод, "Процедура ", "");
	Метод = СтрЗаменить(Метод, " Экспорт", "");
	Метод = СтрЗаменить(Метод, ")", "");
	
	МетодИПараметры = СтрРазделить(Метод, "(");
	
	ИмяМетода = МетодИПараметры[0];
	Параметры = МетодИПараметры[1];
	
	ПрочитаннаяСтрокаПараметров = "";
	Если Не ПустаяСтрока(Параметры) Тогда
		МассивПараметров = СтрРазделить(Параметры, ",");
		Для Каждого Параметр Из МассивПараметров Цикл
			Параметр = СокрЛП(СтрЗаменить(Параметр, "Знач ", ""));
			Параметр = СокрЛП(СтрРазделить(Параметр, "=")[0]);
			ПрочитаннаяСтрокаПараметров = ?(ПустаяСтрока(ПрочитаннаяСтрокаПараметров),
											Параметр,
											ПрочитаннаяСтрокаПараметров + ", " + Параметр);
		КонецЦикла;
	КонецЕсли;
	
	ПолноеИмяОбъектаЧастями = СтрРазделить(Расположение, ".");
	ТипОбъекта  = ПолноеИмяОбъектаЧастями[0];
	
	СинтаксисВызоваБезПараметров = ТипОбъекта + "." + ИмяМетода;
	СинтаксисВызова = СинтаксисВызоваБезПараметров + "(" + ПрочитаннаяСтрокаПараметров + ")";
	
	Результат = Новый Структура;
	Результат.Вставить("СинтаксисВызова", СинтаксисВызова);
	Результат.Вставить("ИмяМетода", ИмяМетода);
	Результат.Вставить("СинтаксисВызоваБезПараметров", СинтаксисВызоваБезПараметров);
	Результат.Вставить("ЭтоФункция", ЭтоФункция);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
